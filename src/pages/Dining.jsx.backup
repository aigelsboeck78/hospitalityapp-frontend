import React, { useState, useEffect } from 'react';
import { 
  UtensilsCrossed, 
  Plus, 
  Search, 
  Filter, 
  Edit, 
  Trash2, 
  Eye, 
  Star,
  MapPin,
  Phone,
  Globe,
  Clock,
  Users,
  Car,
  Wifi,
  Mountain,
  Sun,
  Snowflake,
  Award,
  Camera,
  Loader2,
  CheckCircle,
  AlertCircle
} from 'lucide-react';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api';

const Dining = () => {
  const [diningPlaces, setDiningPlaces] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [cuisineFilter, setCuisineFilter] = useState('');
  const [priceFilter, setPriceFilter] = useState('');
  const [showForm, setShowForm] = useState(false);
  const [editingPlace, setEditingPlace] = useState(null);
  const [scrapingImage, setScrapingImage] = useState(false);
  const [scrapeStatus, setScrapeStatus] = useState(null);

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    cuisine_type: '',
    price_range: 'moderate',
    location: '',
    address: '',
    phone: '',
    website: '',
    opening_hours: {},
    rating: 4.0,
    image_url: '',
    is_featured: false,
    reservation_required: false,
    reservation_url: '',
    tags: [],
    relevance_status: 'Recommended',
    capacity_total: '',
    awards: '',
    season_recommendation: 'Year_Round',
    vegetarian: false,
    vegan: false,
    gluten_free: false,
    family_friendly: false,
    parking: false,
    access_by_car: false,
    access_by_cable_car: false,
    access_by_hiking: false,
    access_by_bike: false,
    access_by_lift: false,
    access_by_public_transport: false,
    access_difficulty: 'easy',
    access_time_minutes: '',
    access_notes: '',
    event_type: '',
    atmosphere: 'casual',
    target_guest_types: []
  });

  const cuisineTypes = [
    'Austrian', 'Italian', 'German', 'International', 'Fine Dining', 
    'Brewery', 'Café', 'Mountain Hut', 'Pizza', 'Steakhouse', 'Asian', 'Mexican'
  ];

  const priceRanges = [
    { value: 'budget', label: '$ Budget', icon: '€' },
    { value: 'moderate', label: '$$ Moderate', icon: '€€' },
    { value: 'expensive', label: '$$$ Expensive', icon: '€€€' },
    { value: 'luxury', label: '$$$$ Luxury', icon: '€€€€' }
  ];

  const relevanceOptions = [
    { value: 'Must_See', label: 'Must See', color: 'red' },
    { value: 'Highly_Recommended', label: 'Highly Recommended', color: 'orange' },
    { value: 'Recommended', label: 'Recommended', color: 'blue' },
    { value: 'Popular', label: 'Popular', color: 'green' },
    { value: 'Standard', label: 'Standard', color: 'gray' }
  ];

  const eventTypes = [
    { value: '', label: 'None' },
    { value: 'Austrian_Party', label: 'Austrian Party (Traditional)' },
    { value: 'Traditional_Party', label: 'Traditional Party' },
    { value: 'Live_Music', label: 'Live Music' },
    { value: 'DJ_Night', label: 'DJ Night' },
    { value: 'Apres_Ski_Party', label: 'Après-Ski Party' },
    { value: 'Dancing', label: 'Dancing' },
    { value: 'Karaoke', label: 'Karaoke' },
    { value: 'Sports_Bar', label: 'Sports Bar' }
  ];

  const atmosphereTypes = [
    { value: 'casual', label: 'Casual' },
    { value: 'party', label: 'Party' },
    { value: 'lively', label: 'Lively' },
    { value: 'romantic', label: 'Romantic' },
    { value: 'family', label: 'Family-Friendly' },
    { value: 'business', label: 'Business' },
    { value: 'quiet', label: 'Quiet' },
    { value: 'upscale', label: 'Upscale' }
  ];

  const guestTypeOptions = [
    { value: 'boys_weekend', label: 'Boys Weekend', icon: '🍺' },
    { value: 'girls_weekend', label: 'Girls Weekend', icon: '🥂' },
    { value: 'couples', label: 'Couples', icon: '💕' },
    { value: 'families', label: 'Families', icon: '👨‍👩‍👧‍👦' },
    { value: 'business', label: 'Business Travelers', icon: '💼' },
    { value: 'solo_travelers', label: 'Solo Travelers', icon: '🎒' },
    { value: 'groups', label: 'Large Groups', icon: '👥' },
    { value: 'party_goers', label: 'Party Goers', icon: '🎉' },
    { value: 'young_adults', label: 'Young Adults', icon: '🎪' },
    { value: 'seniors', label: 'Seniors', icon: '👴👵' }
  ];

  useEffect(() => {
    fetchDiningPlaces();
  }, []);

  const fetchDiningPlaces = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE_URL}/dining`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // The new API returns the array directly
      if (Array.isArray(data)) {
        setDiningPlaces(data);
      } else if (data.success && data.data) {
        // Support old format too
        setDiningPlaces(data.data);
      } else {
        setDiningPlaces([]);
      }
    } catch (err) {
      setError(err.message);
      console.error('Error fetching dining places:', err);
      setDiningPlaces([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      const token = localStorage.getItem('token');
      const url = editingPlace 
        ? `${API_BASE_URL}/dining/${editingPlace.id}`
        : `${API_BASE_URL}/dining`;
      
      const method = editingPlace ? 'PUT' : 'POST';
      
      // Process tags from string to array
      const tags = typeof formData.tags === 'string' 
        ? formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag)
        : formData.tags;
      
      // Map form data to database fields for update
      let processedData;
      if (editingPlace) {
        // For update, use database field names
        processedData = {
          name_en: formData.name,
          name_de: editingPlace.name_de || formData.name, // Preserve German name if exists
          category: editingPlace.category || 'Restaurant',
          location_area: formData.location,
          street_address: formData.address,
          postal_code: editingPlace.postal_code || '8970',
          city: editingPlace.city || 'Schladming',
          altitude_m: editingPlace.altitude_m,
          phone: formData.phone,
          website: formData.website,
          email: editingPlace.email,
          hours_winter: formData.opening_hours?.monday || editingPlace.hours_winter,
          hours_summer: formData.opening_hours?.monday || editingPlace.hours_summer,
          cuisine_type: formData.cuisine_type,
          price_range: formData.price_range === 'budget' ? 1 : 
                      formData.price_range === 'moderate' ? 2 :
                      formData.price_range === 'expensive' ? 3 :
                      formData.price_range === 'luxury' ? 4 : 2,
          capacity_indoor: editingPlace.capacity_indoor,
          capacity_outdoor: editingPlace.capacity_outdoor,
          capacity_total: formData.capacity_total || editingPlace.capacity_total,
          awards: formData.awards || editingPlace.awards,
          accessibility: editingPlace.accessibility,
          parking: formData.parking,
          family_friendly: formData.family_friendly,
          vegetarian: formData.vegetarian,
          vegan: formData.vegan,
          gluten_free: formData.gluten_free,
          reservations_required: formData.reservation_required ? 'Yes' : 'No',
          season_recommendation: formData.season_recommendation || 'Year_Round',
          relevance_status: formData.relevance_status || 'Recommended',
          access_by_car: formData.access_by_car,
          access_by_cable_car: formData.access_by_cable_car,
          access_by_hiking: formData.access_by_hiking,
          access_by_bike: formData.access_by_bike,
          access_by_lift: formData.access_by_lift,
          access_by_public_transport: formData.access_by_public_transport,
          access_difficulty: formData.access_difficulty,
          access_time_minutes: formData.access_time_minutes ? parseInt(formData.access_time_minutes) : null,
          access_notes: formData.access_notes,
          event_type: formData.event_type,
          atmosphere: formData.atmosphere,
          target_guest_types: JSON.stringify(formData.target_guest_types),
          image_url: formData.image_url,
          latitude: editingPlace.latitude,
          longitude: editingPlace.longitude,
          is_active: true
        };
      } else {
        // For create, use simpler structure (the backend should handle this)
        processedData = {
          ...formData,
          tags,
          rating: parseFloat(formData.rating)
        };
      }

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(processedData),
      });

      const data = await response.json();
      
      if (data.success) {
        await fetchDiningPlaces();
        resetForm();
        setShowForm(false);
        setEditingPlace(null);
      } else {
        throw new Error(data.error || 'Failed to save dining place');
      }
    } catch (err) {
      setError(err.message);
      console.error('Error saving dining place:', err);
    }
  };

  const handleEdit = (place) => {
    setEditingPlace(place);
    // Map API data structure to form data structure
    setFormData({
      name: place.name || place.name_en || place.name_de || '',
      description: place.description || `${place.cuisine_type || place.category || ''} cuisine`,
      cuisine_type: place.cuisine_type || '',
      price_range: typeof place.price_range === 'number' ? 
        ['', 'budget', 'moderate', 'expensive', 'luxury'][place.price_range] || 'moderate' : 
        place.price_range || 'moderate',
      location: place.location || place.location_area || '',
      address: place.address || place.street_address || '',
      phone: place.phone || '',
      website: place.website || '',
      opening_hours: place.opening_hours || {
        monday: place.hours_winter || '',
        tuesday: place.hours_winter || '',
        wednesday: place.hours_winter || '',
        thursday: place.hours_winter || '',
        friday: place.hours_winter || '',
        saturday: place.hours_winter || '',
        sunday: place.hours_winter || ''
      },
      rating: place.rating || 4.0,
      image_url: place.image_url || '',
      is_featured: place.is_featured || (place.relevance_status === 'Must_See' || place.relevance_status === 'Highly_Recommended'),
      reservation_required: place.reservation_required || (place.reservations_required === 'Yes' || place.reservations_required === 'Recommended'),
      reservation_url: place.reservation_url || '',
      tags: Array.isArray(place.tags) ? place.tags.join(', ') : place.tags || '',
      relevance_status: place.relevance_status || 'Recommended',
      capacity_total: place.capacity_total || '',
      awards: place.awards || '',
      season_recommendation: place.season_recommendation || 'Year_Round',
      vegetarian: place.vegetarian || false,
      vegan: place.vegan || false,
      gluten_free: place.gluten_free || false,
      family_friendly: place.family_friendly || false,
      parking: place.parking || false,
      access_by_car: place.access_by_car || false,
      access_by_cable_car: place.access_by_cable_car || false,
      access_by_hiking: place.access_by_hiking || false,
      access_by_bike: place.access_by_bike || false,
      access_by_lift: place.access_by_lift || false,
      access_by_public_transport: place.access_by_public_transport || false,
      access_difficulty: place.access_difficulty || 'easy',
      access_time_minutes: place.access_time_minutes || '',
      access_notes: place.access_notes || '',
      event_type: place.event_type || '',
      atmosphere: place.atmosphere || 'casual',
      target_guest_types: Array.isArray(place.target_guest_types) ? place.target_guest_types : 
                         (place.target_guest_types ? JSON.parse(place.target_guest_types) : [])
    });
    setShowForm(true);
  };

  const handleGuestTypeChange = (guestType) => {
    setFormData(prev => ({
      ...prev,
      target_guest_types: prev.target_guest_types.includes(guestType)
        ? prev.target_guest_types.filter(type => type !== guestType)
        : [...prev.target_guest_types, guestType]
    }));
  };

  const handleScrapeImage = async () => {
    if (!editingPlace) return;
    
    setScrapingImage(true);
    setScrapeStatus(null);
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE_URL}/dining/${editingPlace.id}/scrape-image`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      const data = await response.json();
      
      if (data.success) {
        setScrapeStatus({ 
          type: 'success', 
          message: data.message 
        });
        
        // Update the form data with the new image
        setFormData(prev => ({
          ...prev,
          image_url: data.imageUrl
        }));
        
        // Refresh the dining places list
        await fetchDiningPlaces();
      } else {
        setScrapeStatus({ 
          type: 'error', 
          message: data.message || 'Could not find image' 
        });
      }
    } catch (err) {
      setScrapeStatus({ 
        type: 'error', 
        message: 'Failed to scrape image' 
      });
      console.error('Error scraping image:', err);
    } finally {
      setScrapingImage(false);
    }
  };

  const handleDelete = async (id) => {
    if (!confirm('Are you sure you want to delete this dining place?')) return;
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE_URL}/dining/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      const data = await response.json();
      
      if (data.success) {
        await fetchDiningPlaces();
      } else {
        throw new Error(data.error || 'Failed to delete dining place');
      }
    } catch (err) {
      setError(err.message);
      console.error('Error deleting dining place:', err);
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      cuisine_type: '',
      price_range: 'moderate',
      location: '',
      address: '',
      phone: '',
      website: '',
      opening_hours: {},
      rating: 4.0,
      image_url: '',
      is_featured: false,
      reservation_required: false,
      reservation_url: '',
      tags: [],
      relevance_status: 'Recommended',
      capacity_total: '',
      awards: '',
      season_recommendation: 'Year_Round',
      vegetarian: false,
      vegan: false,
      gluten_free: false,
      family_friendly: false,
      parking: false,
      access_by_car: false,
      access_by_cable_car: false,
      access_by_hiking: false,
      access_by_bike: false,
      access_by_lift: false,
      access_by_public_transport: false,
      access_difficulty: 'easy',
      access_time_minutes: '',
      access_notes: '',
      event_type: '',
      atmosphere: 'casual',
      target_guest_types: []
    });
    setScrapeStatus(null);
  };

  const filteredPlaces = diningPlaces.filter(place => {
    const name = place.name || place.name_en || '';
    const location = place.location || place.location_area || place.city || '';
    const matchesSearch = name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         location.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCuisine = !cuisineFilter || place.cuisine_type === cuisineFilter;
    const matchesPrice = !priceFilter || String(place.price_range) === priceFilter;
    return matchesSearch && matchesCuisine && matchesPrice;
  });

  const getPriceDisplay = (priceRange) => {
    // Handle both string and numeric price ranges
    if (typeof priceRange === 'number') {
      const icons = ['€', '€€', '€€€', '€€€€', '€€€€€'];
      return icons[priceRange - 1] || '€€';
    }
    const range = priceRanges.find(p => p.value === priceRange);
    return range ? range.icon : '€€';
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <UtensilsCrossed className="h-8 w-8 text-blue-600" />
            <h1 className="text-3xl font-bold text-gray-900">Dining Places</h1>
          </div>
          <button
            onClick={() => { resetForm(); setShowForm(true); setEditingPlace(null); }}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
          >
            <Plus className="h-4 w-4" />
            <span>Add Dining Place</span>
          </button>
        </div>
        
        <p className="text-gray-600">
          Manage dining recommendations for your guests. {diningPlaces.length} total places.
        </p>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border mb-6 p-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
            <input
              type="text"
              placeholder="Search dining places..."
              className="pl-10 pr-4 py-2 border rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="relative">
            <Filter className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
            <select
              className="pl-10 pr-4 py-2 border rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={cuisineFilter}
              onChange={(e) => setCuisineFilter(e.target.value)}
            >
              <option value="">All Cuisines</option>
              {cuisineTypes.map(type => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>
          
          <div className="relative">
            <select
              className="pl-4 pr-4 py-2 border rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={priceFilter}
              onChange={(e) => setPriceFilter(e.target.value)}
            >
              <option value="">All Price Ranges</option>
              {priceRanges.map(range => (
                <option key={range.value} value={range.value}>{range.label}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          {error}
        </div>
      )}

      {/* Dining Places Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-8">
        {filteredPlaces.map(place => (
          <div key={place.id} className="bg-white rounded-lg shadow-sm border overflow-hidden hover:shadow-lg transition-all duration-200">
            {place.image_url && (
              <div className="h-56 bg-gray-200 relative">
                <img
                  src={place.image_url}
                  alt={place.name || place.name_en}
                  className="w-full h-full object-cover"
                />
                {/* Overlays */}
                <div className="absolute top-2 left-2 right-2 flex justify-between items-start">
                  <div className="flex flex-col gap-1">
                    {place.relevance_status === 'Must_See' && (
                      <span className="bg-red-600 text-white px-2 py-1 rounded text-xs font-bold">
                        MUST SEE
                      </span>
                    )}
                    {place.relevance_status === 'Highly_Recommended' && (
                      <span className="bg-orange-500 text-white px-2 py-1 rounded text-xs font-bold">
                        HIGHLY RECOMMENDED
                      </span>
                    )}
                  </div>
                  <div className="flex flex-col gap-1 items-end">
                    {place.awards && (
                      <span className="bg-yellow-500 text-white px-2 py-1 rounded text-xs font-semibold flex items-center">
                        <Award className="h-3 w-3 mr-1" />
                        {place.awards}
                      </span>
                    )}
                  </div>
                </div>
                {/* Price overlay */}
                <div className="absolute bottom-2 left-2">
                  <span className="bg-black/70 text-white px-3 py-1 rounded font-bold">
                    {getPriceDisplay(place.price_range)}
                  </span>
                </div>
              </div>
            )}
            
            <div className="p-5">
              {/* Header */}
              <div className="mb-3">
                <h3 className="font-bold text-xl text-gray-900 mb-1">
                  {place.name || place.name_en || place.name_de}
                </h3>
                <span className="inline-block bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium">
                  {place.cuisine_type || place.category}
                </span>
              </div>
              
              {/* Location & Contact */}
              <div className="space-y-2 mb-4">
                {(place.location_area || place.city) && (
                  <div className="flex items-start text-gray-600 text-sm">
                    <MapPin className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" />
                    <div>
                      <span>{place.location_area || place.city}</span>
                      {place.altitude_m && (
                        <span className="block text-xs text-gray-500">
                          <Mountain className="h-3 w-3 inline mr-1" />
                          {place.altitude_m}m altitude
                        </span>
                      )}
                    </div>
                  </div>
                )}
                
                {place.phone && (
                  <div className="flex items-center text-gray-600 text-sm">
                    <Phone className="h-4 w-4 mr-2" />
                    <span>{place.phone}</span>
                  </div>
                )}
                
                {place.website && (
                  <div className="flex items-center text-gray-600 text-sm">
                    <Globe className="h-4 w-4 mr-2" />
                    <a href={place.website.startsWith('http') ? place.website : `https://${place.website}`} 
                       target="_blank" 
                       rel="noopener noreferrer"
                       className="text-blue-600 hover:underline truncate">
                      {place.website}
                    </a>
                  </div>
                )}
              </div>
              
              {/* Capacity & Features */}
              <div className="grid grid-cols-2 gap-2 mb-4 text-sm">
                {place.capacity_total && (
                  <div className="flex items-center text-gray-600">
                    <Users className="h-4 w-4 mr-1" />
                    <span>{place.capacity_total} seats</span>
                  </div>
                )}
                {place.capacity_outdoor && place.capacity_outdoor > 0 && (
                  <div className="flex items-center text-gray-600">
                    <Sun className="h-4 w-4 mr-1" />
                    <span>{place.capacity_outdoor} outdoor</span>
                  </div>
                )}
                {place.parking && (
                  <div className="flex items-center text-gray-600">
                    <Car className="h-4 w-4 mr-1" />
                    <span>Parking</span>
                  </div>
                )}
                {place.accessibility && (
                  <div className="flex items-center text-gray-600" title={place.accessibility}>
                    <span className="text-xs">📍 {place.accessibility}</span>
                  </div>
                )}
              </div>
              
              {/* Season & Hours */}
              <div className="mb-4 space-y-2">
                {place.season_recommendation && (
                  <div className="flex items-center text-xs text-gray-600">
                    {place.season_recommendation.includes('Winter') && <Snowflake className="h-3 w-3 mr-1" />}
                    {place.season_recommendation.includes('Summer') && <Sun className="h-3 w-3 mr-1" />}
                    <span>{place.season_recommendation.replace(/_/g, ' ')}</span>
                  </div>
                )}
                {(place.hours_winter || place.hours_summer) && (
                  <div className="flex items-start text-xs text-gray-600">
                    <Clock className="h-3 w-3 mr-1 mt-0.5" />
                    <div>
                      {place.hours_winter && <div>Winter: {place.hours_winter}</div>}
                      {place.hours_summer && <div>Summer: {place.hours_summer}</div>}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Tags */}
              <div className="flex flex-wrap gap-1 mb-4">
                {place.family_friendly && (
                  <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs font-medium flex items-center">
                    <Users className="h-3 w-3 mr-1" />
                    Family
                  </span>
                )}
                {place.vegetarian && (
                  <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                    🥗 Vegetarian
                  </span>
                )}
                {place.vegan && (
                  <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                    🌱 Vegan
                  </span>
                )}
                {place.gluten_free && (
                  <span className="bg-amber-100 text-amber-800 px-2 py-1 rounded-full text-xs font-medium">
                    🌾 Gluten-Free
                  </span>
                )}
                {place.reservations_required && place.reservations_required !== 'No' && (
                  <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-medium">
                    📞 {place.reservations_required === 'Yes' ? 'Reservation Required' : 'Reservation Recommended'}
                  </span>
                )}
              </div>

              {/* Access Methods */}
              {(place.access_by_car || place.access_by_cable_car || place.access_by_hiking || place.access_by_bike || place.access_by_lift || place.access_by_public_transport) && (
                <div className="flex flex-wrap gap-1 mb-4">
                  {place.access_by_car && (
                    <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium">
                      🚗 Car Access
                    </span>
                  )}
                  {place.access_by_cable_car && (
                    <span className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full text-xs font-medium">
                      🚡 Cable Car
                    </span>
                  )}
                  {place.access_by_hiking && (
                    <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                      🥾 Hiking
                    </span>
                  )}
                  {place.access_by_bike && (
                    <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs font-medium">
                      🚴 Bike Access
                    </span>
                  )}
                  {place.access_by_lift && (
                    <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs font-medium">
                      🎿 Ski Lift
                    </span>
                  )}
                  {place.access_by_public_transport && (
                    <span className="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs font-medium">
                      🚌 Public Transport
                    </span>
                  )}
                  {place.access_time_minutes && (
                    <span className="bg-slate-100 text-slate-800 px-2 py-1 rounded-full text-xs font-medium">
                      ⏱️ {place.access_time_minutes} min
                    </span>
                  )}
                  {place.access_difficulty && place.access_difficulty !== 'easy' && (
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                      place.access_difficulty === 'difficult' ? 'bg-red-100 text-red-800' :
                      place.access_difficulty === 'moderate' ? 'bg-orange-100 text-orange-800' :
                      'bg-green-100 text-green-800'
                    }`}>
                      {place.access_difficulty === 'difficult' ? '🔴 Difficult' :
                       place.access_difficulty === 'moderate' ? '🟡 Moderate' :
                       '🟢 Easy'} Access
                    </span>
                  )}
                </div>
              )}

              {/* Event Type & Guest Types */}
              {(place.event_type || place.atmosphere || (place.target_guest_types && place.target_guest_types.length > 0)) && (
                <div className="space-y-2 mb-4">
                  {place.event_type && (
                    <div className="flex items-center text-xs text-gray-600">
                      <span className="bg-gradient-to-r from-red-500 to-orange-500 text-white px-2 py-1 rounded-full text-xs font-bold mr-2">
                        🎉 {place.event_type.replace(/_/g, ' ')}
                      </span>
                    </div>
                  )}
                  
                  {place.atmosphere && place.atmosphere !== 'casual' && (
                    <div className="flex items-center text-xs text-gray-600">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        place.atmosphere === 'party' ? 'bg-purple-100 text-purple-800' :
                        place.atmosphere === 'romantic' ? 'bg-pink-100 text-pink-800' :
                        place.atmosphere === 'lively' ? 'bg-yellow-100 text-yellow-800' :
                        place.atmosphere === 'upscale' ? 'bg-indigo-100 text-indigo-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {place.atmosphere === 'party' ? '🎉' :
                         place.atmosphere === 'romantic' ? '💕' :
                         place.atmosphere === 'lively' ? '⚡' :
                         place.atmosphere === 'upscale' ? '✨' : '🏷️'} {place.atmosphere.charAt(0).toUpperCase() + place.atmosphere.slice(1)}
                      </span>
                    </div>
                  )}

                  {place.target_guest_types && place.target_guest_types.length > 0 && (
                    <div className="flex flex-wrap gap-1">
                      {JSON.parse(place.target_guest_types).map(guestType => {
                        const type = guestTypeOptions.find(t => t.value === guestType);
                        if (!type) return null;
                        return (
                          <span key={guestType} className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full text-xs font-medium">
                            {type.icon} {type.label}
                          </span>
                        );
                      })}
                    </div>
                  )}
                </div>
              )}
              
              {/* Actions */}
              <div className="flex items-center justify-between pt-4 border-t">
                <div className="flex items-center space-x-2">
                  {place.is_active ? (
                    <span className="flex items-center text-green-600 text-xs">
                      <CheckCircle className="h-3 w-3 mr-1" />
                      Active
                    </span>
                  ) : (
                    <span className="flex items-center text-gray-400 text-xs">
                      <AlertCircle className="h-3 w-3 mr-1" />
                      Inactive
                    </span>
                  )}
                </div>
                
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleEdit(place)}
                    className="text-blue-600 hover:text-blue-800 p-1.5 hover:bg-blue-50 rounded transition-colors"
                    title="Edit"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDelete(place.id)}
                    className="text-red-600 hover:text-red-800 p-1.5 hover:bg-red-50 rounded transition-colors"
                    title="Delete"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Form Modal */}
      {showForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <h2 className="text-2xl font-bold mb-6">
                {editingPlace ? 'Edit Dining Place' : 'Add New Dining Place'}
              </h2>
              
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Name *
                    </label>
                    <input
                      type="text"
                      required
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.name}
                      onChange={(e) => setFormData({...formData, name: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Cuisine Type *
                    </label>
                    <select
                      required
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.cuisine_type}
                      onChange={(e) => setFormData({...formData, cuisine_type: e.target.value})}
                    >
                      <option value="">Select Cuisine</option>
                      {cuisineTypes.map(type => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    rows="3"
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.description}
                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                  />
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Location
                    </label>
                    <input
                      type="text"
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.location}
                      onChange={(e) => setFormData({...formData, location: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Price Range
                    </label>
                    <select
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.price_range}
                      onChange={(e) => setFormData({...formData, price_range: e.target.value})}
                    >
                      {priceRanges.map(range => (
                        <option key={range.value} value={range.value}>{range.label}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Relevance Status
                    </label>
                    <select
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.relevance_status}
                      onChange={(e) => setFormData({...formData, relevance_status: e.target.value})}
                    >
                      {relevanceOptions.map(option => (
                        <option key={option.value} value={option.value}>{option.label}</option>
                      ))}
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Address
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.address}
                    onChange={(e) => setFormData({...formData, address: e.target.value})}
                  />
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Phone
                    </label>
                    <input
                      type="tel"
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.phone}
                      onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Website
                    </label>
                    <input
                      type="url"
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.website}
                      onChange={(e) => setFormData({...formData, website: e.target.value})}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Rating (1-5)
                    </label>
                    <input
                      type="number"
                      min="1"
                      max="5"
                      step="0.1"
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.rating}
                      onChange={(e) => setFormData({...formData, rating: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Image URL
                    </label>
                    <div className="flex space-x-2">
                      <input
                        type="url"
                        className="flex-1 p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        value={formData.image_url}
                        onChange={(e) => setFormData({...formData, image_url: e.target.value})}
                      />
                      {editingPlace && (
                        <button
                          type="button"
                          onClick={handleScrapeImage}
                          disabled={scrapingImage}
                          className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center space-x-2"
                          title="Automatically find image for this dining place"
                        >
                          {scrapingImage ? (
                            <>
                              <Loader2 className="h-4 w-4 animate-spin" />
                              <span>Scraping...</span>
                            </>
                          ) : (
                            <>
                              <Camera className="h-4 w-4" />
                              <span>Find Image</span>
                            </>
                          )}
                        </button>
                      )}
                    </div>
                    {scrapeStatus && (
                      <div className={`mt-2 p-2 rounded text-sm flex items-center ${
                        scrapeStatus.type === 'success' 
                          ? 'bg-green-100 text-green-700' 
                          : 'bg-red-100 text-red-700'
                      }`}>
                        {scrapeStatus.type === 'success' ? (
                          <CheckCircle className="h-4 w-4 mr-2" />
                        ) : (
                          <AlertCircle className="h-4 w-4 mr-2" />
                        )}
                        {scrapeStatus.message}
                      </div>
                    )}
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Tags (comma-separated)
                  </label>
                  <input
                    type="text"
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="e.g. romantic, family-friendly, outdoor seating"
                    value={formData.tags}
                    onChange={(e) => setFormData({...formData, tags: e.target.value})}
                  />
                </div>

                {/* Additional Details Section */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Capacity (Total Seats)
                    </label>
                    <input
                      type="number"
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.capacity_total}
                      onChange={(e) => setFormData({...formData, capacity_total: e.target.value})}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Awards/Recognition
                    </label>
                    <input
                      type="text"
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g. Michelin Star, 5 stars"
                      value={formData.awards}
                      onChange={(e) => setFormData({...formData, awards: e.target.value})}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Season Recommendation
                  </label>
                  <select
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.season_recommendation}
                    onChange={(e) => setFormData({...formData, season_recommendation: e.target.value})}
                  >
                    <option value="Year_Round">Year Round</option>
                    <option value="Summer">Summer</option>
                    <option value="Winter">Winter</option>
                    <option value="Spring">Spring</option>
                    <option value="Autumn">Autumn</option>
                    <option value="Winter_Summer">Winter & Summer</option>
                  </select>
                </div>

                {/* Event Type & Atmosphere */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Event Type
                    </label>
                    <select
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.event_type}
                      onChange={(e) => setFormData({...formData, event_type: e.target.value})}
                    >
                      {eventTypes.map(type => (
                        <option key={type.value} value={type.value}>{type.label}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Atmosphere
                    </label>
                    <select
                      className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.atmosphere}
                      onChange={(e) => setFormData({...formData, atmosphere: e.target.value})}
                    >
                      {atmosphereTypes.map(type => (
                        <option key={type.value} value={type.value}>{type.label}</option>
                      ))}
                    </select>
                  </div>
                </div>

                {/* Target Guest Types */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Target Guest Types
                  </label>
                  <p className="text-sm text-gray-600 mb-3">
                    Select guest types that would be interested in this dining place:
                  </p>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {guestTypeOptions.map(guestType => (
                      <label key={guestType.value} className="flex items-center">
                        <input
                          type="checkbox"
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          checked={formData.target_guest_types.includes(guestType.value)}
                          onChange={() => handleGuestTypeChange(guestType.value)}
                        />
                        <span className="ml-2 text-sm text-gray-700 flex items-center">
                          {guestType.icon} {guestType.label}
                        </span>
                      </label>
                    ))}
                  </div>
                  {formData.target_guest_types.length > 0 && (
                    <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                      <p className="text-sm text-blue-800">
                        <strong>Selected:</strong> {formData.target_guest_types.map(typeValue => {
                          const type = guestTypeOptions.find(t => t.value === typeValue);
                          return type ? `${type.icon} ${type.label}` : typeValue;
                        }).join(', ')}
                      </p>
                    </div>
                  )}
                </div>
                
                {/* Features & Amenities */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Features & Amenities
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.vegetarian}
                        onChange={(e) => setFormData({...formData, vegetarian: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700">Vegetarian Options</span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.vegan}
                        onChange={(e) => setFormData({...formData, vegan: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700">Vegan Options</span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.gluten_free}
                        onChange={(e) => setFormData({...formData, gluten_free: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700">Gluten-Free Options</span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.family_friendly}
                        onChange={(e) => setFormData({...formData, family_friendly: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700">Family Friendly</span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.parking}
                        onChange={(e) => setFormData({...formData, parking: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700">Parking Available</span>
                    </label>
                  </div>
                </div>

                {/* Access Methods */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Access Methods
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mb-4">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.access_by_car}
                        onChange={(e) => setFormData({...formData, access_by_car: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700 flex items-center">
                        🚗 Accessible by Car
                      </span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.access_by_cable_car}
                        onChange={(e) => setFormData({...formData, access_by_cable_car: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700 flex items-center">
                        🚡 Cable Car/Gondola
                      </span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.access_by_hiking}
                        onChange={(e) => setFormData({...formData, access_by_hiking: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700 flex items-center">
                        🥾 Accessible by Hiking
                      </span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.access_by_bike}
                        onChange={(e) => setFormData({...formData, access_by_bike: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700 flex items-center">
                        🚴 Accessible by Bike
                      </span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.access_by_lift}
                        onChange={(e) => setFormData({...formData, access_by_lift: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700 flex items-center">
                        🎿 Ski Lift Access
                      </span>
                    </label>

                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={formData.access_by_public_transport}
                        onChange={(e) => setFormData({...formData, access_by_public_transport: e.target.checked})}
                      />
                      <span className="ml-2 text-sm text-gray-700 flex items-center">
                        🚌 Public Transport
                      </span>
                    </label>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Access Difficulty
                      </label>
                      <select
                        className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        value={formData.access_difficulty}
                        onChange={(e) => setFormData({...formData, access_difficulty: e.target.value})}
                      >
                        <option value="easy">Easy</option>
                        <option value="moderate">Moderate</option>
                        <option value="difficult">Difficult</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Access Time (minutes)
                      </label>
                      <input
                        type="number"
                        min="0"
                        className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        value={formData.access_time_minutes}
                        onChange={(e) => setFormData({...formData, access_time_minutes: e.target.value})}
                        placeholder="e.g., 15"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Access Notes
                      </label>
                      <input
                        type="text"
                        className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        value={formData.access_notes}
                        onChange={(e) => setFormData({...formData, access_notes: e.target.value})}
                        placeholder="e.g., Park at base station"
                      />
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-6">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      checked={formData.is_featured}
                      onChange={(e) => setFormData({...formData, is_featured: e.target.checked})}
                    />
                    <span className="ml-2 text-sm text-gray-700">Featured</span>
                  </label>
                  
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      checked={formData.reservation_required}
                      onChange={(e) => setFormData({...formData, reservation_required: e.target.checked})}
                    />
                    <span className="ml-2 text-sm text-gray-700">Reservation Required</span>
                  </label>
                </div>
                
                <div className="flex justify-end space-x-4 pt-6">
                  <button
                    type="button"
                    onClick={() => { setShowForm(false); setEditingPlace(null); setScrapeStatus(null); }}
                    className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    {editingPlace ? 'Update' : 'Create'} Dining Place
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dining;