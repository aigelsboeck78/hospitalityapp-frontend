import React, { useState, useEffect } from 'react';
import { Plus, Edit, Trash2, Calendar, MapPin, Clock, Tag, Link, Camera } from 'lucide-react';
import api from '../services/api';
import EventForm from '../components/EventForm';

const Events = () => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedTimeframe, setSelectedTimeframe] = useState('all');
  const [showForm, setShowForm] = useState(false);
  const [editingEvent, setEditingEvent] = useState(null);
  const [stats, setStats] = useState({ today: 0, upcoming: 0, featured: 0, total: 0 });

  const categories = [
    { id: 'all', name: 'All Events', icon: '📅' },
    { id: 'general', name: 'General', icon: '🎉' },
    { id: 'sports', name: 'Sports', icon: '⛷️' },
    { id: 'culture', name: 'Culture', icon: '🎭' },
    { id: 'culinary', name: 'Culinary', icon: '🍽️' },
    { id: 'market', name: 'Markets', icon: '🛒' },
    { id: 'music', name: 'Music', icon: '🎵' },
    { id: 'family', name: 'Family', icon: '👨‍👩‍👧‍👦' }
  ];

  const timeframes = [
    { id: 'all', name: 'All Events' },
    { id: 'today', name: 'Today' },
    { id: 'upcoming', name: 'Upcoming (7 days)' },
    { id: 'featured', name: 'Featured Only' }
  ];

  useEffect(() => {
    fetchEvents();
    fetchStats();
  }, [selectedCategory, selectedTimeframe]);

  const fetchEvents = async () => {
    try {
      setLoading(true);
      let endpoint = '/events';
      
      const params = new URLSearchParams();
      if (selectedCategory !== 'all') {
        params.append('category', selectedCategory);
      }
      if (selectedTimeframe === 'today') {
        endpoint = '/events/today';
      } else if (selectedTimeframe === 'upcoming') {
        endpoint = '/events/upcoming';
        params.append('days', '7');
      } else if (selectedTimeframe === 'featured') {
        params.append('featured', 'true');
      }
      
      const queryString = params.toString();
      const response = await api.get(`${endpoint}${queryString ? `?${queryString}` : ''}`);
      
      if (response.data.success) {
        setEvents(response.data.data || []);
      }
    } catch (error) {
      console.error('Error fetching events:', error);
      setEvents([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await api.get('/events/stats');
      if (response.data.success) {
        setStats(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching event stats:', error);
    }
  };

  const handleEdit = (event) => {
    setEditingEvent(event);
    setShowForm(true);
  };

  const handleDelete = async (eventId) => {
    if (window.confirm('Are you sure you want to delete this event?')) {
      try {
        await api.delete(`/events/${eventId}`);
        await fetchEvents();
        await fetchStats();
      } catch (error) {
        console.error('Error deleting event:', error);
      }
    }
  };

  const handleSaveEvent = async (eventData) => {
    try {
      if (editingEvent) {
        await api.put(`/events/${editingEvent.id}`, eventData);
      } else {
        await api.post('/events', eventData);
      }
      
      await fetchEvents();
      await fetchStats();
      setShowForm(false);
      setEditingEvent(null);
    } catch (error) {
      console.error('Error saving event:', error);
      throw error;
    }
  };

  const handleScrapeEvents = async () => {
    try {
      setLoading(true);
      const response = await api.post('/events/scrape');
      if (response.data.success) {
        await fetchEvents();
        await fetchStats();
        alert(`Successfully scraped ${response.data.total} events!`);
      }
    } catch (error) {
      console.error('Error scraping events:', error);
      alert('Error scraping events. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const isToday = (dateString) => {
    const today = new Date();
    const eventDate = new Date(dateString);
    return today.toDateString() === eventDate.toDateString();
  };

  const isPast = (dateString) => {
    const now = new Date();
    const eventDate = new Date(dateString);
    return eventDate < now;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="flex flex-col items-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
          <p className="mt-4 text-gray-600">Loading events...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white shadow rounded-lg p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Calendar className="h-8 w-8 text-indigo-600 mr-3" />
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Events Management</h1>
              <p className="text-gray-600">Local events from schladming-dachstein.at</p>
            </div>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={handleScrapeEvents}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              <svg className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Scrape Events
            </button>
            <button
              onClick={() => {
                setEditingEvent(null);
                setShowForm(true);
              }}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
            >
              <Plus className="h-5 w-5 mr-2" />
              Add Event
            </button>
          </div>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Calendar className="h-6 w-6 text-gray-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">Today's Events</dt>
                  <dd className="text-lg font-medium text-gray-900">{stats.today}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Clock className="h-6 w-6 text-gray-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">Upcoming Events</dt>
                  <dd className="text-lg font-medium text-gray-900">{stats.upcoming}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="h-6 w-6 bg-yellow-100 rounded-full flex items-center justify-center">
                  <div className="h-3 w-3 bg-yellow-600 rounded-full"></div>
                </div>
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">Featured Events</dt>
                  <dd className="text-lg font-medium text-gray-900">{stats.featured}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Tag className="h-6 w-6 text-gray-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">Total Events</dt>
                  <dd className="text-lg font-medium text-gray-900">{stats.total}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white shadow rounded-lg p-6 space-y-4">
        {/* Category Filter */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Filter by Category</h3>
          <div className="flex flex-wrap gap-2">
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`inline-flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                  selectedCategory === category.id
                    ? 'bg-indigo-100 text-indigo-800 border border-indigo-300'
                    : 'bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200'
                }`}
              >
                <span className="mr-2">{category.icon}</span>
                {category.name}
              </button>
            ))}
          </div>
        </div>

        {/* Timeframe Filter */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Filter by Time</h3>
          <div className="flex flex-wrap gap-2">
            {timeframes.map((timeframe) => (
              <button
                key={timeframe.id}
                onClick={() => setSelectedTimeframe(timeframe.id)}
                className={`inline-flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                  selectedTimeframe === timeframe.id
                    ? 'bg-green-100 text-green-800 border border-green-300'
                    : 'bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200'
                }`}
              >
                {timeframe.name}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Events List */}
      <div className="bg-white shadow rounded-lg p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          {selectedTimeframe === 'all' 
            ? `All Events (${events.length})`
            : `${timeframes.find(t => t.id === selectedTimeframe)?.name} (${events.length})`
          }
        </h3>
        
        {events.length === 0 ? (
          <div className="text-center py-12">
            <Calendar className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">No events found</h3>
            <p className="mt-1 text-sm text-gray-500">
              Get started by scraping events or creating a new event manually.
            </p>
            <div className="mt-6 flex justify-center space-x-3">
              <button
                onClick={handleScrapeEvents}
                className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                Scrape Events
              </button>
              <button
                onClick={() => {
                  setEditingEvent(null);
                  setShowForm(true);
                }}
                className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
              >
                <Plus className="h-5 w-5 mr-2" />
                Add Event
              </button>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {events.map((event) => (
              <div key={event.id} className={`border rounded-lg overflow-hidden hover:shadow-md transition-shadow ${
                isPast(event.start_date) ? 'border-gray-200 bg-gray-50' : 
                isToday(event.start_date) ? 'border-green-300 bg-green-50' : 'border-gray-200'
              }`}>
                <div className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <h3 className="text-lg font-semibold text-gray-900">{event.name}</h3>
                        
                        {event.is_featured && (
                          <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                            ⭐ Featured
                          </span>
                        )}
                        
                        {isToday(event.start_date) && (
                          <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            📅 Today
                          </span>
                        )}
                        
                        {isPast(event.start_date) && (
                          <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            Past Event
                          </span>
                        )}
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                        <div className="flex items-center text-sm text-gray-600">
                          <Clock className="h-4 w-4 mr-2" />
                          {formatDate(event.start_date)}
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-600">
                          <MapPin className="h-4 w-4 mr-2" />
                          {event.location}
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-600">
                          <Tag className="h-4 w-4 mr-2" />
                          <span className="mr-1">
                            {categories.find(c => c.id === event.category)?.icon || '📅'}
                          </span>
                          {categories.find(c => c.id === event.category)?.name || event.category}
                        </div>
                        
                        {event.source_url && (
                          <div className="flex items-center text-sm text-gray-600">
                            <Link className="h-4 w-4 mr-2" />
                            <a 
                              href={event.source_url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-indigo-600 hover:text-indigo-800"
                            >
                              View Source
                            </a>
                          </div>
                        )}
                      </div>
                      
                      {event.description && (
                        <p className="text-sm text-gray-700 mb-3 line-clamp-2">{event.description}</p>
                      )}
                      
                      {event.price_info && (
                        <div className="text-sm text-green-600 font-medium mb-3">
                          💰 {event.price_info}
                        </div>
                      )}
                    </div>
                    
                    {event.image_url && (
                      <div className="ml-6 flex-shrink-0">
                        <img
                          src={event.image_url.startsWith('http') 
                            ? event.image_url 
                            : `http://localhost:3001${event.image_url}`}
                          alt={event.name}
                          className="h-24 w-24 object-cover rounded-lg"
                          onError={(e) => {
                            e.target.style.display = 'none';
                          }}
                        />
                      </div>
                    )}
                  </div>
                  
                  {/* Actions */}
                  <div className="mt-4 flex justify-end space-x-2">
                    <button
                      onClick={() => handleEdit(event)}
                      className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
                    >
                      <Edit className="h-4 w-4 mr-1" />
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(event.id)}
                      className="inline-flex items-center px-3 py-1.5 border border-red-300 shadow-sm text-sm font-medium rounded text-red-700 bg-white hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4 mr-1" />
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Event Form Modal */}
      <EventForm
        event={editingEvent}
        isOpen={showForm}
        onClose={() => {
          setShowForm(false);
          setEditingEvent(null);
        }}
        onSave={handleSaveEvent}
      />
    </div>
  );
};

export default Events;